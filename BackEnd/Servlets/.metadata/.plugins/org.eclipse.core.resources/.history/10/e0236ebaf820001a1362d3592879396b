package com.capgemini.mywebapp.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.capgemini.mywebapp.beans.EmployeeInfoBean;

public class EmployeeDAOImpl implements EmployeeDAO{
	private EntityManagerFactory entityManagerFactory=Persistence.createEntityManagerFactory("employeePersistence");

	@Override
	public EmployeeInfoBean searchEmployee(int empId) {
		EntityManager manager=entityManagerFactory.createEntityManager();
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class,empId);
		manager.close();
		return employeeInfoBean;

	}

	@Override
	public EmployeeInfoBean authenticate(int empId, String password) {
	EntityManager manager=entityManagerFactory.createEntityManager();
	String jpql="from EmployeeInfoBean where empId=:empId and password=:pwd";
	Query query=manager.createQuery(jpql);
	query.setParameter("empId", empId);
	query.setParameter("pwd", password);
	
	EmployeeInfoBean employeeInfoBean=null;
	try{
		employeeInfoBean=(EmployeeInfoBean)query.getSingleResult();
	}catch(Exception e) {
		e.printStackTrace();
	}
	manager.close();
	return employeeInfoBean;
	
		
	}//end of authentication

	
	@Override
	public boolean addEmployee(EmployeeInfoBean employeeInfoBean) {
		boolean isAdded=false;
		EntityManager manager=entityManagerFactory.createEntityManager();
		EntityTransaction transaction=null;
		try {
			transaction=manager.getTransaction();
			transaction.begin();
			manager.remove(employeeInfoBean);
			transaction.commit();
			isAdded=true;
		}catch(Exception e) {
			e.printStackTrace();
		}
		manager.close();
		return isAdded;
	}
	
		
	}

	@Override
		public boolean updateEmployee(EmployeeInfoBean employeeInfoBean) {
		
		return isUpdated;
	}

	@Override
	public boolean deleteEmployee(int empId) {
		boolean isDeleted=false;
		EntityManager manager=entityManagerFactory.createEntityManager();
		EmployeeInfoBean employeeInfoBean=manager.find(EmployeeInfoBean.class, empId);
		EntityTransaction transaction=null;
		if(employeeInfoBean!=null) {
			transaction=manager.getTransaction();
			transaction.begin();
			manager.remove(employeeInfoBean);
			transaction.commit();
			isDeleted=true;
		}
		manager.close();
		return isDeleted;
	}

	

	@Override
	public List<EmployeeInfoBean> getAllEmployees() {
		EntityManager manager=entityManagerFactory.createEntityManager();
		String jpql="from EmployeeInfoBean";
		List<EmployeeInfoBean> employeeList=query.getResultList();
		return null;
	}
	

}
