package com.capgemini.forestjdbc.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.capgemini.forestjdbc.bean.ContractBean;
import com.capgemini.forestjdbc.bean.CustomerBean;
import com.capgemini.forestjdbc.bean.ProductBean;
import com.capgemini.forestjdbc.bean.SchedulerBean;
import com.capgemini.forestjdbc.exception.ForestException;

public class CustomerDAOImpl implements CustomerDAO {
	FileReader reader;
	Properties prop;
	CustomerBean user;

	public CustomerDAOImpl() {
		try {
			reader = new FileReader("db.properties");
			prop = new Properties();
			prop.load(reader);
			Class.forName(prop.getProperty("driverClass"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean addCustomer(CustomerBean bean) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("addCustomerQuery"));) {
			pstmt.setInt(1, bean.getCustid());
			pstmt.setString(2, bean.getCustname());
			pstmt.setString(3, bean.getStreetAddress1());
			pstmt.setString(4, bean.getStreetAddress2());
			pstmt.setString(5, bean.getTown());
			pstmt.setString(6, bean.getPostalcode());
			pstmt.setString(7, bean.getEmail());
			pstmt.setString(8, bean.getTelno());

			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	@Override
	public boolean deleteCustomer(int custid) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("deleteCustomerQuery"));) {
			pstmt.setInt(1, custid);

			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			} else {
				return false;
			
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}


@Override
	public boolean modifyCustomer(CustomerBean bean) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("modifyCustomerQuery"));) {
			pstmt.setString(1, bean.getCustname());
			pstmt.setString(2, bean.getStreetAddress1());
			pstmt.setString(3, bean.getStreetAddress2());
			pstmt.setString(4, bean.getEmail());
			pstmt.setString(5,bean.getPostalcode());
			pstmt.setString(6,bean.getTown());
			pstmt.setString(7,bean.getTelno());
			pstmt.setInt(8,bean.getCustid());
			
			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			}
		} catch (Exception e) {
		}
		return false;

}

@Override
public List<CustomerBean> showCustomer() {
	List<CustomerBean> list=new ArrayList<CustomerBean>();
	try(Connection conn=DriverManager.getConnection(prop.getProperty("dbUrl"),
			prop.getProperty("dbUser"),prop.getProperty("dbPassword"));
			Statement stmt=conn.createStatement();
			ResultSet rs=stmt.executeQuery(prop.getProperty("query2"))){
			while(rs.next()) {
			user=new CustomerBean();
			user.setCustid(rs.getInt(1));
			user.setCustname(rs.getString(2));
			user.setEmail(rs.getString(3));
			user.setPostalcode(rs.getString(4));
			user.setStreetAddress1(rs.getString(5));
			user.setStreetAddress2(rs.getString(6));
			user.setTelno(rs.getString(7));
			user.setTown(rs.getString(8));
			list.add(user);
		}
		return list;
	}catch(Exception e) {
		e.getStackTrace();
	}
	return null;

}

@Override
public CustomerBean getCustomer(int customerid) {
	CustomerBean customer=null;

	try(Connection conn=DriverManager.getConnection(prop.getProperty("dbUrl"),
			prop.getProperty("dbUser"),
			prop.getProperty("dbPassword"));
			PreparedStatement pstmt=conn.prepareStatement(prop.getProperty("getCustomer"))){

		pstmt.setInt(1, customerid);
		
		

		ResultSet rs=pstmt.executeQuery();

		while(rs.next()) {
			customer =new CustomerBean();
			customer.setCustid(rs.getInt("customerid"));
			customer.setCustname(rs.getString("customerName"));
			customer.setEmail(rs.getString("email"));
			customer.setPostalcode(rs.getString("postalcode"));
			customer.setStreetAddress1(rs.getString("streetAddress1"));
			customer.setStreetAddress2(rs.getString("streetAddress2"));
			customer.setTown(rs.getString("town"));
			customer.setTelno(rs.getString("telephone"));
			
			return customer;
		
		}

	}catch(Exception e) {
	}
	//throw new NotFoundException("Details Not Found!!");
	return null;
	
}
}
