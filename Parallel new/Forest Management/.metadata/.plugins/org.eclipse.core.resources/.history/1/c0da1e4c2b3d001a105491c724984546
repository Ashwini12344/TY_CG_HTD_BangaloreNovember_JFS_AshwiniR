package com.capgemini.springrest.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.capgemini.springrest.dto.CustomerBean;

@Repository
public class CustomerDAOImpl implements CustomerDAO {
	@PersistenceUnit
	EntityManagerFactory factory;

	@Override
	public boolean addCustomer(CustomerBean bean) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		try {
			transaction.begin();
			manager.persist(bean);
			transaction.commit();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

@Override
public boolean modifyCustomer(CustomerBean bean) {
	EntityManager manager = factory.createEntityManager();
	EntityTransaction transaction = manager.getTransaction();
	CustomerBean customerBean = manager.find(CustomerBean.class, bean.getCustomerid());
	if (customerBean != null) {
		transaction.begin();
		customerBean.setCustomerid(customerBean.getCustomerid());
		customerBean.setCustomerName(customerBean.getCustomerName());
		customerBean.setEmail(customerBean.getEmail());
		customerBean.setPostalcode(customerBean.getPostalcode());
		customerBean.setStreetAddress1(customerBean.getStreetAddress1());
		customerBean.setStreetAddress2(customerBean.getStreetAddress2());
		customerBean.setTelephone(customerBean.getTelephone());
		customerBean.setTown(customerBean.getTown());
		transaction.commit();
		return true;
	}
	manager.close();
	return false;
}

	@Override
	public boolean deleteCustomer(int customerid) {
		EntityManager manager = factory.createEntityManager();
		EntityTransaction transaction = manager.getTransaction();
		CustomerBean bean = manager.find(CustomerBean.class, customerid);
		if(bean!=null) {
			transaction.begin();
			manager.remove(bean);
			transaction.commit();
			return true;
		} else {
			return false;
		}
		
	}

	@Override
	public List<CustomerBean> getAllCustomers() {
		EntityManager manager = factory.createEntityManager();
		String getall="from CustomerBean";
		TypedQuery<CustomerBean> query=manager.createQuery(getall,CustomerBean.class);
		return query.getResultList();
	}

	@Override
	public CustomerBean getCustomer(int customerid) {
		EntityManager manager = factory.createEntityManager();
		CustomerBean bean=manager.find(CustomerBean.class, customerid);
		return bean;
	}

}
